/*
 * This file is generated by jOOQ.
 */
package org.cloudvisualization.jooq.model.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.cloudvisualization.jooq.model.Keys;
import org.cloudvisualization.jooq.model.Public;
import org.cloudvisualization.jooq.model.tables.records.SimulationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Simulation extends TableImpl<SimulationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.simulation</code>
     */
    public static final Simulation SIMULATION = new Simulation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SimulationRecord> getRecordType() {
        return SimulationRecord.class;
    }

    /**
     * The column <code>public.simulation.id</code>.
     */
    public final TableField<SimulationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.simulation.name</code>.
     */
    public final TableField<SimulationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.simulation.started_at</code>.
     */
    public final TableField<SimulationRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.simulation.ended_at</code>.
     */
    public final TableField<SimulationRecord, LocalDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Simulation(Name alias, Table<SimulationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Simulation(Name alias, Table<SimulationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.simulation</code> table reference
     */
    public Simulation(String alias) {
        this(DSL.name(alias), SIMULATION);
    }

    /**
     * Create an aliased <code>public.simulation</code> table reference
     */
    public Simulation(Name alias) {
        this(alias, SIMULATION);
    }

    /**
     * Create a <code>public.simulation</code> table reference
     */
    public Simulation() {
        this(DSL.name("simulation"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SimulationRecord> getPrimaryKey() {
        return Keys.SIMULATION_PKEY;
    }

    @Override
    public Simulation as(String alias) {
        return new Simulation(DSL.name(alias), this);
    }

    @Override
    public Simulation as(Name alias) {
        return new Simulation(alias, this);
    }

    @Override
    public Simulation as(Table<?> alias) {
        return new Simulation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Simulation rename(String name) {
        return new Simulation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Simulation rename(Name name) {
        return new Simulation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Simulation rename(Table<?> name) {
        return new Simulation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Simulation where(Condition condition) {
        return new Simulation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Simulation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Simulation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Simulation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Simulation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Simulation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Simulation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Simulation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Simulation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Simulation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
