/*
 * This file is generated by jOOQ.
 */
package org.cooper.jooq.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.cooper.jooq.model.Keys;
import org.cooper.jooq.model.Public;
import org.cooper.jooq.model.tables.Host.HostPath;
import org.cooper.jooq.model.tables.records.HostMetricRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HostMetric extends TableImpl<HostMetricRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.host_metric</code>
     */
    public static final HostMetric HOST_METRIC = new HostMetric();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HostMetricRecord> getRecordType() {
        return HostMetricRecord.class;
    }

    /**
     * The column <code>public.host_metric.id</code>.
     */
    public final TableField<HostMetricRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.host_metric.host_id</code>.
     */
    public final TableField<HostMetricRecord, UUID> HOST_ID = createField(DSL.name("host_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.host_metric.simulation_time_seconds</code>.
     */
    public final TableField<HostMetricRecord, Double> SIMULATION_TIME_SECONDS = createField(DSL.name("simulation_time_seconds"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.host_metric.cpu_utilization</code>.
     */
    public final TableField<HostMetricRecord, Double> CPU_UTILIZATION = createField(DSL.name("cpu_utilization"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.host_metric.ram_usage_mb</code>.
     */
    public final TableField<HostMetricRecord, Long> RAM_USAGE_MB = createField(DSL.name("ram_usage_mb"), SQLDataType.BIGINT.nullable(false), this, "");

    private HostMetric(Name alias, Table<HostMetricRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HostMetric(Name alias, Table<HostMetricRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.host_metric</code> table reference
     */
    public HostMetric(String alias) {
        this(DSL.name(alias), HOST_METRIC);
    }

    /**
     * Create an aliased <code>public.host_metric</code> table reference
     */
    public HostMetric(Name alias) {
        this(alias, HOST_METRIC);
    }

    /**
     * Create a <code>public.host_metric</code> table reference
     */
    public HostMetric() {
        this(DSL.name("host_metric"), null);
    }

    public <O extends Record> HostMetric(Table<O> path, ForeignKey<O, HostMetricRecord> childPath, InverseForeignKey<O, HostMetricRecord> parentPath) {
        super(path, childPath, parentPath, HOST_METRIC);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class HostMetricPath extends HostMetric implements Path<HostMetricRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> HostMetricPath(Table<O> path, ForeignKey<O, HostMetricRecord> childPath, InverseForeignKey<O, HostMetricRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private HostMetricPath(Name alias, Table<HostMetricRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public HostMetricPath as(String alias) {
            return new HostMetricPath(DSL.name(alias), this);
        }

        @Override
        public HostMetricPath as(Name alias) {
            return new HostMetricPath(alias, this);
        }

        @Override
        public HostMetricPath as(Table<?> alias) {
            return new HostMetricPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<HostMetricRecord> getPrimaryKey() {
        return Keys.HOST_METRIC_PKEY;
    }

    @Override
    public List<ForeignKey<HostMetricRecord, ?>> getReferences() {
        return Arrays.asList(Keys.HOST_METRIC__HOST_METRIC_HOST_ID_FKEY);
    }

    private transient HostPath _host;

    /**
     * Get the implicit join path to the <code>public.host</code> table.
     */
    public HostPath host() {
        if (_host == null)
            _host = new HostPath(this, Keys.HOST_METRIC__HOST_METRIC_HOST_ID_FKEY, null);

        return _host;
    }

    @Override
    public HostMetric as(String alias) {
        return new HostMetric(DSL.name(alias), this);
    }

    @Override
    public HostMetric as(Name alias) {
        return new HostMetric(alias, this);
    }

    @Override
    public HostMetric as(Table<?> alias) {
        return new HostMetric(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HostMetric rename(String name) {
        return new HostMetric(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HostMetric rename(Name name) {
        return new HostMetric(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HostMetric rename(Table<?> name) {
        return new HostMetric(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HostMetric where(Condition condition) {
        return new HostMetric(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HostMetric where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HostMetric where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HostMetric where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HostMetric where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HostMetric where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HostMetric where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HostMetric where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HostMetric whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HostMetric whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
