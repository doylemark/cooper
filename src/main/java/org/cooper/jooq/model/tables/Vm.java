/*
 * This file is generated by jOOQ.
 */
package org.cooper.jooq.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.cooper.jooq.model.Keys;
import org.cooper.jooq.model.Public;
import org.cooper.jooq.model.tables.Cloudlet.CloudletPath;
import org.cooper.jooq.model.tables.Host.HostPath;
import org.cooper.jooq.model.tables.Simulation.SimulationPath;
import org.cooper.jooq.model.tables.VmMetric.VmMetricPath;
import org.cooper.jooq.model.tables.records.VmRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vm extends TableImpl<VmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vm</code>
     */
    public static final Vm VM = new Vm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VmRecord> getRecordType() {
        return VmRecord.class;
    }

    /**
     * The column <code>public.vm.id</code>.
     */
    public final TableField<VmRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.vm.simulation_id</code>.
     */
    public final TableField<VmRecord, UUID> SIMULATION_ID = createField(DSL.name("simulation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vm.host_id</code>.
     */
    public final TableField<VmRecord, UUID> HOST_ID = createField(DSL.name("host_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.vm.cloudsim_id</code>.
     */
    public final TableField<VmRecord, Long> CLOUDSIM_ID = createField(DSL.name("cloudsim_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.vm.start_time_seconds</code>.
     */
    public final TableField<VmRecord, Double> START_TIME_SECONDS = createField(DSL.name("start_time_seconds"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.vm.finish_time_seconds</code>.
     */
    public final TableField<VmRecord, Double> FINISH_TIME_SECONDS = createField(DSL.name("finish_time_seconds"), SQLDataType.DOUBLE, this, "");

    private Vm(Name alias, Table<VmRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vm(Name alias, Table<VmRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.vm</code> table reference
     */
    public Vm(String alias) {
        this(DSL.name(alias), VM);
    }

    /**
     * Create an aliased <code>public.vm</code> table reference
     */
    public Vm(Name alias) {
        this(alias, VM);
    }

    /**
     * Create a <code>public.vm</code> table reference
     */
    public Vm() {
        this(DSL.name("vm"), null);
    }

    public <O extends Record> Vm(Table<O> path, ForeignKey<O, VmRecord> childPath, InverseForeignKey<O, VmRecord> parentPath) {
        super(path, childPath, parentPath, VM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VmPath extends Vm implements Path<VmRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VmPath(Table<O> path, ForeignKey<O, VmRecord> childPath, InverseForeignKey<O, VmRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VmPath(Name alias, Table<VmRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VmPath as(String alias) {
            return new VmPath(DSL.name(alias), this);
        }

        @Override
        public VmPath as(Name alias) {
            return new VmPath(alias, this);
        }

        @Override
        public VmPath as(Table<?> alias) {
            return new VmPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<VmRecord> getPrimaryKey() {
        return Keys.VM_PKEY;
    }

    @Override
    public List<ForeignKey<VmRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VM__VM_HOST_ID_FKEY, Keys.VM__VM_SIMULATION_ID_FKEY);
    }

    private transient HostPath _host;

    /**
     * Get the implicit join path to the <code>public.host</code> table.
     */
    public HostPath host() {
        if (_host == null)
            _host = new HostPath(this, Keys.VM__VM_HOST_ID_FKEY, null);

        return _host;
    }

    private transient SimulationPath _simulation;

    /**
     * Get the implicit join path to the <code>public.simulation</code> table.
     */
    public SimulationPath simulation() {
        if (_simulation == null)
            _simulation = new SimulationPath(this, Keys.VM__VM_SIMULATION_ID_FKEY, null);

        return _simulation;
    }

    private transient CloudletPath _cloudlet;

    /**
     * Get the implicit to-many join path to the <code>public.cloudlet</code>
     * table
     */
    public CloudletPath cloudlet() {
        if (_cloudlet == null)
            _cloudlet = new CloudletPath(this, null, Keys.CLOUDLET__CLOUDLET_VM_ID_FKEY.getInverseKey());

        return _cloudlet;
    }

    private transient VmMetricPath _vmMetric;

    /**
     * Get the implicit to-many join path to the <code>public.vm_metric</code>
     * table
     */
    public VmMetricPath vmMetric() {
        if (_vmMetric == null)
            _vmMetric = new VmMetricPath(this, null, Keys.VM_METRIC__VM_METRIC_VM_ID_FKEY.getInverseKey());

        return _vmMetric;
    }

    @Override
    public Vm as(String alias) {
        return new Vm(DSL.name(alias), this);
    }

    @Override
    public Vm as(Name alias) {
        return new Vm(alias, this);
    }

    @Override
    public Vm as(Table<?> alias) {
        return new Vm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vm rename(String name) {
        return new Vm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vm rename(Name name) {
        return new Vm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vm rename(Table<?> name) {
        return new Vm(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vm where(Condition condition) {
        return new Vm(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vm where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vm where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vm where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vm where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vm where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vm where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vm where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vm whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vm whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
